<?php
/**
 * INTRODUCTION
 * ------------------------------
 * Bienvenue dans votre premier projet PHP !
 * 
 * Ce projet est une initiation √† la programmation web avec PHP et MySQL.
 * Il vous permettra de comprendre les bases de la programmation web et de mettre en pratique vos connaissances.
 * 
 * Il est construit comme un parcours guid√© √† travers un code compl√®tement document√© et d√©taill√© pas √† pas pour vous aider √† comprendre 
 * la logique de programmation laissant place √† l'exp√©rimentation et √† la d√©couverte. Car c'est en pratiquant que l'on apprend le mieux.
 * 
 * Ce projet est divis√© en plusieurs parties :
 * - Un formulaire d'inscription √† une newsletter
 * - Un syst√®me de validation de formulaire en JavaScript
 * - Un traitement de formulaire en PHP
 * - Une connexion √† une base de donn√©es MySQL
 * - Une redirection apr√®s soumission du formulaire
 * 
 * √Ä la fin de ce projet, vous aurez appris √† manipuler du PHP, √† mettre en place un CRUD (Create, Read, Update, Delete)
 * et √† interagir avec une base de donn√©es MySQL.
 * 
 * Alors, pr√™t √† coder ? C'est parti ! üöÄ
 */

/**
 * PAGE VARIABLES
 * ------------------------------
 * Les variables PHP permettent de stocker des informations qui peuvent √™tre utilis√©es dans tout le code PHP de la page.
 * 
 * Elles sont d√©finies ici, au d√©but du fichier, pour faciliter la maintenance du code.
 * Ici, nous avons deux variables :
 * - $meta_title : le titre de la page
 * - $meta_description : la description de la page
 * Ces variables sont r√©cup√©r√©es dans le fichier "partials/header.php" pour personnaliser le <title> et la  <meta name="description"> de la page.
 */
$meta_title = "Initiation √† la programmation web";
$meta_description = "Premier projet en PHP et MySQL";

/**
 * MESSAGE DE CONFIRMATION OU D'ERREUR
 * ------------------------------
 * Notre page d'accueil est un formulaire d'inscription √† une newsletter.
 * Lorsque l'utilisateur soumet le formulaire, un message est affich√© en cas d'erreur.
 * Nous allons donc commencer par g√©rer la condition de ce message en function des param√®tres GET de l'URL.
 * 
 * exemple : /?error=already_subscribed
 * 
 * Si la variable $_GET['error'] existe, cela signifie que la page de traitement nous √† redirig√© vers cette page
 * avec un param√®tre "error" dans l'URL pour nous informer d'une erreur lors de l'inscription.
 * 
 * Nous r√©cup√©rons la valeur de ce param√®tre et affichons un message en fonction de la valeur.
 */
if (isset($_GET['error']) && $_GET['error'] === "already_subscribed") {
  $message = "D√©sol√©, vous √™tes d√©j√† inscrit avec cette adresse.";
  $message_type = "warning";
} elseif (isset($_GET['error']) && $_GET['error'] === "invalid_email") {
  $message = "Arf ! L'adresse email n'est pas valide. Veuillez r√©essayer.";
  $message_type = "error";
} elseif (isset($_GET['success']) && $_GET['success'] === "subscribed"){
  $message = "Merci ! Votre inscription a bien √©t√© prise en compte.";
  $message_type = "success";
} else {
  $message = null;
  $message_type = null;
}

/**  
 * INCLUDES
 * ------------------------------
 * En PHP, on s√©pare notre code en plusieurs fichiers pour le rendre plus lisible et plus facile √† maintenir.
 * 
 * Ici, nous incluons le fichier "header.php" qui contient tout le code HTML de l'ent√™te de notre site avec
 * les balises <html>, <head>, <meta>, <title>, <link>, <script> ainsi que la balise d'ouverture <body>.
 * 
 * On utilise la fonction include_once pour inclure le fichier une seule fois.
 * Cela permet d'√©viter d'inclure plusieurs fois le m√™me fichier et de g√©n√©rer des erreurs.
 */
include_once "partials/header.php"; 
?> <!-- On ferme ici la balise PHP pour commencer √† √©crire du HTML -->


<!-- Oui, bien que ce soit une page PHP, on peut aussi √©crire du HTML qui peut aussi contenir du PHP -->
<main class="container">
  <header>
    <h1>Coucou Raphael et Olivier !! :)</h1> 
    <p>Le but de l'exercice est de vous faire manipuler un peu de <strong>HTML</strong> de <strong>JS</strong>, de <strong>PHP</strong> et de faire la liaison avec la base de donn√©es <strong>MySQL</strong>.</p>
    <p>Je vois d√©j√† des visages se crisper... üòÅ ... pas de panique ! L'int√©gralit√© du code est comment√©, comme une visite guid√©e √† travers le code, pour vous aider dans cette t√¢che. Et puis vous verrez, que finalement, ce n'est pas si compliqu√© que √ßa. Vous pourriez m√™me y prendre go√ªt par accident üòÅ</p>
  </header>
  
  <section id="exemple">
    <h2>Merci pour ces deux semaines intenses et riche en √©motion ! #oncodepourdevrai</h2>
    <p>
      Dans cet exemple, nous imaginons proposer l'inscription √† une liste de diffusion. √Ä la soumission du formulaire, la donn√©e est stock√© en <code>BDD</code> dans la table <code>subscribers</code> puis l'utilisateur est <code>redirig√©</code> pour revenir sur cette page.
    </p>
    <p>Nous utilisons aussi un peu de Javascript pour <strong>valider le formulaire</strong>. En effet, si vous regardez bien, le bouton <code>S'inscrire</code> n'est pas cliquable tant qu'une adresse email valide n'est pas renseign√©e.</p>

    <article>
      <h3>Inscrivez-vous √† notre Newsletter !</h3>
      <?php 
        /**
         * MESSAGE DE CONFIRMATION
         * ------------------------------
         * Nous avons d√©fini plus haut un message de confirmation ou d'erreur en fonction des param√®tres GET de l'URL.
         * Donc, si la variable $message existe, cela signifie qu'un message doit √™tre affich√© √† l'utilisateur.
         * 
         * Nous connditionnons donc un message SI la variable $message existe.
         * On passe la variable $message_type dans data-notice (error, warning, success, info) pour afficher le bon style de message.
         * (voir assets/styles/app.css pour les styles des messages)
         * Et on affiche le message dans une balise <p> avec un attribut data-notice pour le style et un attribut data-close pour fermer le message.
         * 
         * Vous voyez, c'est simple non ? üòâ
         */
        if (isset($message)) : ?>
        <p data-notice="<?= $message_type ?>">
          <span><?= $message ?></span>
          <i data-feather="x" data-close></i>
        </p>
      <?php endif; ?>
      <!--
        EXEMPLE DE FORMULAIRE:
        Voici un exemple de formulaire d'inscription √† une newsletter qui stock l'adresse email en base de donn√©e avec la date de soumission. 
        Il est simple et ne fait pas de v√©rification de l'adresse email.
        
        Voici ce dont il est compos√© :
        -> <form> est la balise qui contient tout le formulaire. Il a plusieurs attributs :
          - un attribut "action" indique le fichier PHP qui va traiter les donn√©es du formulaire
          - un attribut "method" indique la m√©thode HTTP √† utiliser pour envoyer les donn√©es. Ici, "POST"

        -> <label> sert √† indiquer √† l'utilisateur ce qu'il doit saisir dans le champ. Il prend un attribut :
          - un attribut "for" qui doit correspondre √† l'attribut "id" du champ √† lier

        -> <input> permet de capturer la saisie de l'utilisateur et poss√®de plusieurs attributs :
          - un attribut "type" avec la valeur "email" pour que le navigateur v√©rifie que l'adresse est bien une adresse email
          - un attribut "name" pour donner un nom √† la donn√©e qui sera envoy√©e au serveur
          - un attribut "id" pour le lier a son label qui a un attribut "for" du m√™me nom
          - un attribut "autocomplete" avec la valeur "off" pour ne pas afficher les suggestions de l'ordinateur
          - un attribut "placeholder" pour indiquer √† l'utilisateur ce qu'il doit saisir
          - un attribut "required" pour que le navigateur sache que ce champ est obligatoire

        -> <bouton> permet de soumettre le formulaire. Il a un attribut :
          - un attribut "type" avec la valeur "submit" pour envoyer les donn√©es.
      -->
      <form id="newsletter-form" action="subscriptions/create.php" method="POST">
        <fieldset role="group">
          <label class="sr-only" for="email">Entrez votre adresse email</label>
          <input type="email" name="email" id="email" autocomplete="off" placeholder="Votre adresse email" required>
          <button type="submit">S'inscrire</button>
        </fieldset>
      </form>
      <!-- 
        FIN DE L'EXEMPLE 
        pour la suite, voir le fichier "subscription/new.php" pour le traitement du formulaire
      -->

    </article>
  </section>

  <section id="explications">
    <h2>Bien, maintenant un peu d'explications</h2>
    <ol>
      <li>Lorsque qu'un utilisateur commence √† saisir des informations dans le champ email, une fonction JS v√©rifie que ce qui est tap√© dans le champs correspond bien √† une adresse email grace √† une <a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Global_Objects/RegExp" target="_blank" rel="noopener noreferrer">expression r√©guli√®re (ou RegExp)</a>. <br>
        Si l'adresse est valide, le bouton <em>S'inscrire</em> devient cliquable.</li>
      <li>L'utilisateur clique alors sur le bouton et le formulaire est envoy√© au script PHP <code>subscriptions/create.php</code> qui se charge de valider le champ. <br>
      Si il est correcte, alors un appel √† la <code>BDD</code> est fait pour y inscrire la donn√©e r√©cup√©r√©e.</li>
      <li>Enfin, si tout c'est bien pass√©, l'utilisateur est redirig√© vers la page <code>merci.php</code> avec un param√®tre dans l'url <code>success=subcribed</code> pour lui indiquer que l'inscription c'est bien pass√©. Dans le cas contraire, si il y a une erreur, on redirige l'utilisateur d'o√π il vient avec un code d'erreur pour afficher le message correspondant.</li>
      <li>Maintenant vous pouvez aller voir l'enregistrement en allant sur la <a href="/subscriptions">page des souscriptions</a></li>
    </ol>
    <p data-notice="info">Malgr√© la simplicit√© de ce formulaire, il constitue une bonne base pour commencer et comprendre la logique de programmation.</p>
  </section>

  <section>
    <h2>Et maintenant ?</h2>
    <p>La suite se passe dans le code. Ouvrez le projet votre √©diteur de code (VS Code), commencez par allez sur la page <code>index.php</code> √† la racine et laissez vous guider.</p>
    <p>L'ensemble de se cours est un parcours guid√© √† travers un code compl√®tement document√© et d√©taill√© pas √† pas. Lisez bien les commentaires, analysez ce qui se passe, exp√©rimentez et laissez vous guider. Vous y apprendrez √† manipuler du PHP et mettre en place un CRUD.</p>
    <p>Et surtout, n'oubliez pas que vous n'√™tes pas seul. Si vous avez des questions, r√©f√©rez vous aux documentation et n'h√©sitez pas √† demander de l'aide √† votre intervenant ou √† vos camarades.</p>
  </section>

  <section id="exercices">
    <h2>√Ä vous de jouer !</h2>
    <p>Votre mission si vous l'acceptez (m√™me si vous n'avez vraiment pas le choix üòÅ) est de coder votre premier projet PHP.</p>
    <p>Voici les √©tapes √† suivre :</p>
    <ol>
      <li>Dans "Adminer" <strong>Cr√©ez votre nouvelle Tables</strong> (ex: recettes) et ajoutez y les champs dont vous avez besoin.</li>
      <li><strong>Cr√©ez une nouvelle page</strong> (ex. <code>recettes.php</code>) dans le dossier public au m√™me niveau que le fichier <code>index.php</code>. N'oublier pas d'y inclure les variables <code>$meta_title</code> et <code>$meta_description</code> ainsi que les fichiers <code>partials/header.php</code> et <code>partials/footer.php</code></li>
      <li>√Ä cette page <strong>Ajoutez un formulaire</strong> avec les champs dont vous avez besoin pour correspondre √† votre base de donn√©e (ex: firstname, lastname, email, etc...).</li>
      <li><strong>Cr√©ez un fichier PHP</strong> dans le dossier <code>includes</code> (ex. <code>action-recettes-create.php</code>) pour traiter les donn√©es du formulaire et les ins√©rer dans la base de donn√©e.</li>
      <li><strong>Redirigez vers page de remerciement</strong> apr√®s l'enregistrement en base de donn√©e et ajuster le message en fonction du context.</li>
      <li><strong>G√©rer le Dark Mode</strong> en compl√©tant la fonction <code>toggleTheme()</code> dans <code>assets/scripts/app.js</code>.</li>
    </ol>
    <p data-notice="warning">Attention √† la correspondance des attributs "name" de vos "input" avec les noms des colonnes de votre table</p>
    <h3>Remarques</h3>
    <ul>
      <li>Vous pouvez personnaliser cette page ou compl√®tement la r√©√©crire.</li>
      <li>Pensez √† utiliser des noms de fichiers coh√©rents avec ce qu'ils repr√©sentent</li>
    </ul>
    <hr>
    <p>... bon courage √† toutes et tous ! üí™</p>
  </section>

  <section id="faq">
    <h2>FAQ</h2>
    <p>Voici des r√©ponses aux questions que vous serez susceptible de poser.</p>
    <details>
      <summary>Pourquoi mon site ne marche pas ?</summary>
      <p>Si vous avez des probl√®mes pour faire fonctionner votre site, v√©rifiez que vous avez bien suivi les instructions et que votre serveur LocalWP est bien lanc√©. Si vous √™tes bloqu√©, n'h√©sitez pas √† demander de l'aide √† votre mentor ou √† vos camarades.</p>
    </details>
    <details>
      <summary>Comment sont g√©r√© les styles ?</summary>
      <p>Comme vous pouvez le constater le site est d√©j√† mis en form (typo, couleur, espacement, responsive, etc...) alors qu'il n'y presque rien dans la feuille de style. Comment ? <strong>Grace √† un framework CSS</strong> üòâ.</p>
      <p>Ici nous utilisons <strong>Pico.css</strong> qui est √† la fois l√©ger et minimaliste con√ßue pour simplifier le processus de d√©veloppement web. Il offre une approche simple et efficace pour styliser rapidement les pages web sans ajouter de poids inutile au chargement.</p> 
      <p>Sa simplicit√© d'utilisation en fait un bon framework pour prototyper des petits projets ou publier de la documentation.</p>
      <p><a href="https://picocss.com/" target="_blank" rel="noopener noreferrer">D√©couvrir Pico.css</a></p>
    </details>
    <details>
      <summary>Puis-je personnaliser le style ?</summary>
      <p>
        Ce n'est a proprement parl√© par le but de l'exercice. Mais, nous vous emp√™cherons jamais de faire du CSS. Bien au contraire üòä
        <br>
        Si vous souhaitez modifier certains √©l√©ments, vous pouvez le faire de puis le fichier <code>assets/styles/app.css</code></p>
      <p>Nous vous recommandons toutefois √† <a href="https://picocss.com/docs" target="_blank" rel="noopener noreferrer">vous r√©f√©rer √† la documentation</a></p> </a>
    </details>
    <details>
      <summary>La couleur "Orange" ne correspond pas √† ma charte ! Comment la changer ?</summary>
      <p>La couleur "Purple" vient avec le theme charg√© pour ce projet. Regardons √ßa de plus pr√®s :</p>
      <p>
        Dans la balise <code>head</code> du fichier <code>partials/header.php</code>, vous trouverez un <code>link</code> qui charge la ressource suivante :
        <code>https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.purple.min.css"</code><br>
        Regardez bien le nom du fichier. Vous pouvez le remplacer par <code>pico.blue.min.css</code> pour avoir un th√®me bleu par exemple. Simple non ? üòâ
      </p>
      <p>Pour plus de themes, aller <a href="https://picocss.com/docs/version-picker" target="_blank" rel="noopener noreferrer">jeter un ≈ìil au version picker</a></p>
    </details>
  </section>
</main>

<!-- On r√©-ouvre la balise PHP pour √† nouveau √©crire du code PHP -->
<?php
/** 
 * INCLUDES (encore !)
 * ------------------------------
 * Tout comme le header, on inclus le footer.php 
 * qui contient tout le code HTML du pied de page de notre site avec
 * la balises <footer> ainsi que la balise de fermeture </body></html> qui ont √©t√© ouvert dans header.php.
 */
include_once "partials/footer.php"; 
